@page "/withdraw"
@using BlazorApp1.Models
@using BlazorApp1.Services
@inject AccountService AccountService
@attribute [Authorize]


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h4 class="card-title text-danger mb-3">🏧 Withdraw Funds</h4>
                    <p class="text-muted">Select an account and enter the amount to withdraw.</p>

                    <EditForm Model="@newAccount" OnValidSubmit="WithdrawAction">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="accountSelect" class="form-label">Select Account</label>
                            <select id="accountSelect" class="form-select" @bind="@selectedAccountID">
                                <option value="">-- Choose an account --</option>
                                @foreach (var a in accounts)
                                {
                                    <option value="@a.Id">@a.Code (@a.Amount.ToString("C"))</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="amountInput" class="form-label">Amount</label>
                            <InputText id="amountInput" class="form-control" @bind-Value="selectedAmount" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-danger">
                                💸 Withdraw
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {


    private List<Audit> audits;
    private List<Account> accounts;
    private Account newAccount=new Account();
    Guid userId = Guid.Empty;
    protected override async Task OnInitializedAsync()
    {
        userId = await AccountService.GetCurrentUserId();
        accounts = AccountService.GetAccounts(userId);
        audits = AccountService.GetLogAudit(userId);
        
    }

    protected async Task SaveAccount()
    {
        AccountService.AddAccount(newAccount.Code, newAccount.Description, newAccount.OrderBy, userId);
        accounts = AccountService.GetAccounts(userId);
        newAccount = new Account();
    }

 

    protected async Task WithdrawAction()
    {
        var originalAc = accounts.Where(x => x.Id == Convert.ToInt32(selectedAccountID)).FirstOrDefault(); ;
        AccountService.Withdraw(selectedAccountID, Convert.ToDecimal(selectedAmount), userId);
        accounts = AccountService.GetAccounts(userId);
        var selectedAc = accounts.Where(x => x.Id == Convert.ToInt32(selectedAccountID)).FirstOrDefault();
        string formatedAmount = Convert.ToDecimal(selectedAmount).ToString("C");
        AccountService.LogAudit(selectedAccountID, Convert.ToDecimal(selectedAmount), userId, "W", selectedAc.Code + " Withrawn " 
            + formatedAmount +". Before:" 
            + originalAc.Amount.ToString("C") + " After: " + selectedAc.Amount.ToString("C"));

        newAccount = new Account();
        selectedAmount = "";

        audits = AccountService.GetLogAudit(userId);

        
    }

    

    int selectedAccountID;
    string selectedAmount;

   
}
